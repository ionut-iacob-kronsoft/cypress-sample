{"version":3,"sources":["const.ts","Form/Form.tsx","utils.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CATEGORY_LIST","FILTERS","Form","props","valueChanges","className","data-cy","initialValues","label","category","filter","onSubmit","values","a","validationSchema","Yup","shape","required","min","oneOf","Object","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","htmlFor","style","display","id","placeholder","type","value","onChange","onBlur","disabled","map","onClick","Utils","request","undefined","NONE","toLowerCase","Date","valueOf","App","useState","setRequest","backgroundImage","composeUrlFromRequest","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d94ac80.chunk.js","sourcesContent":["export enum CATEGORY_LIST {\r\n    ANIMALS = 'ANIMALS',\r\n    ARCHITECTURE = 'ARCHITECTURE',\r\n    NATURE = 'NATURE',\r\n    PEOPLE = 'PEOPLE',\r\n    TECH = 'TECH'\r\n};\r\n\r\nexport enum FILTERS {\r\n    NONE = 'NONE',\r\n    GRAYSCALE = 'GRAYSCALE',\r\n    SEPIA = 'SEPIA'\r\n};\r\n\r\nexport interface IForm {\r\n    valueChanges: Function;\r\n}\r\n\r\nexport interface ImageGeneratorRequest {\r\n    label: string;\r\n    category: CATEGORY_LIST;\r\n    filter: FILTERS;\r\n}","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport './Form.scss';\r\nimport { IForm, ImageGeneratorRequest, CATEGORY_LIST, FILTERS } from \"../const\";\r\n\r\nfunction Form(props: IForm) {\r\n  const { valueChanges } = props;\r\n  return (\r\n    <div className=\"Form\">\r\n      <h1 data-cy=\"title\">Awesome Image<br/><span>Generator</span></h1>\r\n\r\n      <Formik\r\n        initialValues={\r\n          { label: \"\", category: '', filter: '' }\r\n        }\r\n        onSubmit={async (values) => {\r\n          valueChanges(values as ImageGeneratorRequest);\r\n        }}\r\n        validationSchema={\r\n          Yup.object().shape({\r\n            label: Yup.string().required(\"Required\").min(5, 'Title length should be at least 5 characters!'),\r\n            category: Yup.mixed().oneOf(Object.values(CATEGORY_LIST), 'Wrong category').required(\"Required\"),\r\n            filter: Yup.mixed().oneOf(Object.values(FILTERS), 'Wrong filter').required(\"Required\"),\r\n          })\r\n        }\r\n      >\r\n        {(props) => {\r\n          const { values, touched, errors, dirty, isSubmitting, handleChange, handleBlur, handleSubmit, handleReset, } = props;\r\n          return (\r\n            <form onSubmit={handleSubmit}>\r\n              <fieldset>\r\n                <label htmlFor=\"label\" style={{ display: \"block\" }} className={errors.label && touched.label ? \"error\" : \"\"}>Label</label>\r\n                <input id=\"label\"\r\n                  data-cy=\"label-input\"\r\n                  placeholder=\"Enter your text\"\r\n                  type=\"text\"\r\n                  value={values.label}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={errors.label && touched.label ? \"text-input error\" : \"text-input\"}\r\n                />\r\n                {errors.label && touched.label && (\r\n                  <div className=\"error-feedback\" data-cy=\"label-input-error\">{errors.label}</div>\r\n                )}\r\n              </fieldset>\r\n\r\n              <fieldset>\r\n                <label htmlFor=\"category\" style={{ display: \"block\" }} className={errors.category && touched.category ? \"error\" : \"\"}>Category</label>\r\n                <select id=\"category\"\r\n                  placeholder=\"Choose category\"\r\n                  data-cy=\"category-select\"\r\n                  value={values.category}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={errors.category && touched.category ? \"text-input error\" : \"text-input\"}\r\n                >\r\n                  <option disabled></option>\r\n                  {Object.values(CATEGORY_LIST).map(category => <option>{category}</option>)}\r\n                </select>\r\n                {errors.category && touched.category && (\r\n                  <div className=\"error-feedback\" data-cy=\"category-select-error\">{errors.category}</div>\r\n                )}\r\n\r\n                <label htmlFor=\"filter\" style={{ display: \"block\" }} className={errors.filter && touched.filter ? \"error\" : \"\"}>Filter</label>\r\n                <select id=\"filter\"\r\n                  placeholder=\"Choose filter\"\r\n                  data-cy=\"filter-select\"\r\n                  value={values.filter}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={errors.filter && touched.filter ? \"text-input error\" : \"text-input\"}\r\n                >\r\n                  <option disabled></option>\r\n                  {Object.values(FILTERS).map(filter => <option>{filter}</option>)}\r\n                </select>\r\n                {errors.filter && touched.filter && (\r\n                  <div className=\"error-feedback\" data-cy=\"filter-select-error\">{errors.filter}</div>\r\n                )}\r\n              </fieldset>\r\n\r\n              <button type=\"button\" className=\"outline\" onClick={handleReset} disabled={!dirty || isSubmitting}>Reset</button>\r\n              <button type=\"submit\" disabled={isSubmitting}>Generate</button>\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import { FILTERS, ImageGeneratorRequest } from \"./const\";\r\n\r\nexport class Utils {\r\n\r\n    public static composeUrlFromRequest(request: ImageGeneratorRequest | undefined) {\r\n        if (request === undefined) {\r\n            return '';\r\n        }\r\n        const filter = request.filter === FILTERS.NONE ? '' : `/${request.filter.toLowerCase()}`;\r\n        return `https://placeimg.com/1000/1000/${request?.category?.toLowerCase()}${filter}?t=${new Date().valueOf()}`;\r\n    }\r\n\r\n}","import { useState } from 'react';\r\nimport './App.scss';\r\nimport Form from './Form/Form';\r\nimport { Utils } from './utils';\r\nimport { ImageGeneratorRequest } from './const';\r\n\r\nfunction App() {\r\n  const [request, setRequest] = useState<ImageGeneratorRequest>();\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"></header>\r\n      <main>\r\n        <Form valueChanges={(values: ImageGeneratorRequest) => setRequest({...values})}></Form>\r\n        { request && <div className=\"App-image\" style={{backgroundImage: `url(\"${Utils.composeUrlFromRequest(request)}\")`}}>\r\n          {request?.label && <h1>{request.label}</h1>}\r\n        </div>}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}